{"ast":null,"code":"import _slicedToArray from\"/Users/eugenechernomor/Downloads/optimizationProject-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useMemo}from\"react\";import PostItem from\"../PostItem/PostItem\";import TextField from\"@material-ui/core/TextField\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PostsFilter=function PostsFilter(_ref){var posts=_ref.posts,lastElement=_ref.lastElement;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),filterdPosts=_useState2[0],setFiltredPosts=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),postFilter=_useState4[0],setPostFilter=_useState4[1];var handleChange=function handleChange(e){setPostFilter(e.target.value);};var postsFiltredByInputValue=useMemo(function(){return posts.filter(function(post){return post.title.includes(postFilter)||post.body.includes(postFilter);});},[postFilter,posts]);useEffect(function(){if(posts.length!==0&&postsFiltredByInputValue.length===0){lastElement.current.style.display=\"none\";}else{lastElement.current.style.display=\"block\";}setFiltredPosts(postsFiltredByInputValue);},[postsFiltredByInputValue,lastElement,posts]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TextField,{label:\"postsFilter\",variant:\"outlined\",name:\"postsFilter\",fullWidth:true,onChange:handleChange}),/*#__PURE__*/_jsx(\"ul\",{style:{display:\"grid\",maxWidth:\"80vw\",gridGap:\"20px\",marginLeft:\"auto\",marginRight:\"auto\",gridTemplateColumns:\"repeat(4, 1fr)\"},children:filterdPosts.map(function(post){return/*#__PURE__*/_jsx(PostItem,{post:post},post.id);})})]});};export default PostsFilter;","map":{"version":3,"sources":["/Users/eugenechernomor/Downloads/optimizationProject-main/src/components/PostsFilter/PostsFilter.js"],"names":["React","useState","useEffect","useMemo","PostItem","TextField","PostsFilter","posts","lastElement","filterdPosts","setFiltredPosts","postFilter","setPostFilter","handleChange","e","target","value","postsFiltredByInputValue","filter","post","title","includes","body","length","current","style","display","maxWidth","gridGap","marginLeft","marginRight","gridTemplateColumns","map","id"],"mappings":"4IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,OAArC,KAAoD,OAApD,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,C,6IAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAA4B,IAAzBC,CAAAA,KAAyB,MAAzBA,KAAyB,CAAlBC,WAAkB,MAAlBA,WAAkB,CAC9C,cAAwCP,QAAQ,CAAC,EAAD,CAAhD,wCAAOQ,YAAP,eAAqBC,eAArB,eACA,eAAoCT,QAAQ,CAAC,EAAD,CAA5C,yCAAOU,UAAP,eAAmBC,aAAnB,eAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BF,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb,CACD,CAFD,CAIA,GAAMC,CAAAA,wBAAwB,CAAGd,OAAO,CAAC,UAAM,CAC7C,MAAOI,CAAAA,KAAK,CAACW,MAAN,CACL,SAACC,IAAD,QACEA,CAAAA,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBV,UAApB,GAAmCQ,IAAI,CAACG,IAAL,CAAUD,QAAV,CAAmBV,UAAnB,CADrC,EADK,CAAP,CAID,CALuC,CAKrC,CAACA,UAAD,CAAaJ,KAAb,CALqC,CAAxC,CAOAL,SAAS,CAAC,UAAM,CACd,GAAIK,KAAK,CAACgB,MAAN,GAAiB,CAAjB,EAAsBN,wBAAwB,CAACM,MAAzB,GAAoC,CAA9D,CAAiE,CAC/Df,WAAW,CAACgB,OAAZ,CAAoBC,KAApB,CAA0BC,OAA1B,CAAoC,MAApC,CACD,CAFD,IAEO,CACLlB,WAAW,CAACgB,OAAZ,CAAoBC,KAApB,CAA0BC,OAA1B,CAAoC,OAApC,CACD,CACDhB,eAAe,CAACO,wBAAD,CAAf,CACD,CAPQ,CAON,CAACA,wBAAD,CAA2BT,WAA3B,CAAwCD,KAAxC,CAPM,CAAT,CASA,mBACE,wCACE,KAAC,SAAD,EACE,KAAK,CAAC,aADR,CAEE,OAAO,CAAC,UAFV,CAGE,IAAI,CAAC,aAHP,CAIE,SAAS,KAJX,CAKE,QAAQ,CAAEM,YALZ,EADF,cAQE,WACE,KAAK,CAAE,CACLa,OAAO,CAAE,MADJ,CAELC,QAAQ,CAAE,MAFL,CAGLC,OAAO,CAAE,MAHJ,CAILC,UAAU,CAAE,MAJP,CAKLC,WAAW,CAAE,MALR,CAMLC,mBAAmB,CAAE,gBANhB,CADT,UAUGtB,YAAY,CAACuB,GAAb,CAAiB,SAACb,IAAD,qBAChB,KAAC,QAAD,EAAU,IAAI,CAAEA,IAAhB,EAA2BA,IAAI,CAACc,EAAhC,CADgB,EAAjB,CAVH,EARF,GADF,CAyBD,CAjDD,CAmDA,cAAe3B,CAAAA,WAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport PostItem from \"../PostItem/PostItem\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst PostsFilter = ({ posts, lastElement }) => {\n  const [filterdPosts, setFiltredPosts] = useState([]);\n  const [postFilter, setPostFilter] = useState(\"\");\n\n  const handleChange = (e) => {\n    setPostFilter(e.target.value);\n  };\n\n  const postsFiltredByInputValue = useMemo(() => {\n    return posts.filter(\n      (post) =>\n        post.title.includes(postFilter) || post.body.includes(postFilter)\n    );\n  }, [postFilter, posts]);\n\n  useEffect(() => {\n    if (posts.length !== 0 && postsFiltredByInputValue.length === 0) {\n      lastElement.current.style.display = \"none\";\n    } else {\n      lastElement.current.style.display = \"block\";\n    }\n    setFiltredPosts(postsFiltredByInputValue);\n  }, [postsFiltredByInputValue, lastElement, posts]);\n\n  return (\n    <>\n      <TextField\n        label=\"postsFilter\"\n        variant=\"outlined\"\n        name=\"postsFilter\"\n        fullWidth\n        onChange={handleChange}\n      />\n      <ul\n        style={{\n          display: \"grid\",\n          maxWidth: \"80vw\",\n          gridGap: \"20px\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          gridTemplateColumns: \"repeat(4, 1fr)\",\n        }}\n      >\n        {filterdPosts.map((post) => (\n          <PostItem post={post} key={post.id} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default PostsFilter;\n"]},"metadata":{},"sourceType":"module"}