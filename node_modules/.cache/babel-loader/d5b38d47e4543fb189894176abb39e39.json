{"ast":null,"code":"var _jsxFileName = \"/Users/eugenechernomor/Downloads/optimizationProject-main/src/components/PostsList/PostsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAllPosts } from \"../../store/actionCreators/Posts\";\nimport { getMorePosts } from \"./../../helpers/getMorePosts\";\nimport { useObserver } from \"./../../hooks/useObserver\";\nimport Preloader from \"../Preloader/Preloader\";\nimport PostsFilter from \"../PostsFilter/PostsFilter\";\nimport RandomNumber from \"../RandomNumber/RandomNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostsList = () => {\n  _s();\n\n  const [visiblePosts, setVisiblePosts] = useState([]);\n  const lastElement = useRef();\n  const {\n    postsList,\n    isFetching\n  } = useSelector(state => state.posts);\n  const dispatch = useDispatch();\n\n  const observerCallback = visiblePosts => {\n    const uploadedPosts = getMorePosts(postsList, visiblePosts);\n\n    if (uploadedPosts) {\n      setVisiblePosts(visiblePosts => [...visiblePosts, ...uploadedPosts]);\n    }\n  };\n\n  useEffect(() => {\n    setVisiblePosts(visiblePosts => [...postsList.slice(0, visiblePosts.length)]);\n  }, [postsList]);\n  useObserver(lastElement, postsList.length !== visiblePosts, isFetching, observerCallback, visiblePosts);\n  useEffect(() => {\n    if (postsList.length !== 0) return;\n\n    const getPosts = async () => {\n      await dispatch(getAllPosts());\n    };\n\n    getPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RandomNumber, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PostsFilter, {\n        posts: visiblePosts,\n        lastElement: lastElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lastElement,\n      style: {\n        height: \"10px\",\n        backgroundColor: \"red\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostsList, \"6eLQEYtXaboi68jfK87WjYjoYAI=\", false, function () {\n  return [useSelector, useDispatch, useObserver];\n});\n\n_c = PostsList;\nexport default PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/eugenechernomor/Downloads/optimizationProject-main/src/components/PostsList/PostsList.js"],"names":["React","useEffect","useState","useRef","useSelector","useDispatch","getAllPosts","getMorePosts","useObserver","Preloader","PostsFilter","RandomNumber","PostsList","visiblePosts","setVisiblePosts","lastElement","postsList","isFetching","state","posts","dispatch","observerCallback","uploadedPosts","slice","length","getPosts","height","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMa,WAAW,GAAGZ,MAAM,EAA1B;AAEA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4Bb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA7C;AACA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;;AAEA,QAAMgB,gBAAgB,GAAIR,YAAD,IAAkB;AACzC,UAAMS,aAAa,GAAGf,YAAY,CAACS,SAAD,EAAYH,YAAZ,CAAlC;;AACA,QAAIS,aAAJ,EAAmB;AACjBR,MAAAA,eAAe,CAAED,YAAD,IAAkB,CAAC,GAAGA,YAAJ,EAAkB,GAAGS,aAArB,CAAnB,CAAf;AACD;AACF,GALD;;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,eAAe,CAAED,YAAD,IAAkB,CAChC,GAAGG,SAAS,CAACO,KAAV,CAAgB,CAAhB,EAAmBV,YAAY,CAACW,MAAhC,CAD6B,CAAnB,CAAf;AAGD,GAJQ,EAIN,CAACR,SAAD,CAJM,CAAT;AAMAR,EAAAA,WAAW,CACTO,WADS,EAETC,SAAS,CAACQ,MAAV,KAAqBX,YAFZ,EAGTI,UAHS,EAITI,gBAJS,EAKTR,YALS,CAAX;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,SAAS,CAACQ,MAAV,KAAqB,CAAzB,EAA4B;;AAE5B,UAAMC,QAAQ,GAAG,YAAY;AAC3B,YAAML,QAAQ,CAACd,WAAW,EAAZ,CAAd;AACD,KAFD;;AAIAmB,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT;AAUA,sBACE;AAAA,4BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGR,UAAU,gBACT,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADS,gBAGT;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEJ,YAApB;AAAkC,QAAA,WAAW,EAAEE;AAA/C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALJ,eASE;AACE,MAAA,GAAG,EAAEA,WADP;AAEE,MAAA,KAAK,EAAE;AAAEW,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,eAAe,EAAE;AAAnC;AAFT;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAgBD,CAtDD;;GAAMf,S;UAI8BR,W,EACjBC,W,EAejBG,W;;;KApBII,S;AAwDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAllPosts } from \"../../store/actionCreators/Posts\";\nimport { getMorePosts } from \"./../../helpers/getMorePosts\";\nimport { useObserver } from \"./../../hooks/useObserver\";\nimport Preloader from \"../Preloader/Preloader\";\nimport PostsFilter from \"../PostsFilter/PostsFilter\";\nimport RandomNumber from \"../RandomNumber/RandomNumber\";\n\nconst PostsList = () => {\n  const [visiblePosts, setVisiblePosts] = useState([]);\n  const lastElement = useRef();\n\n  const { postsList, isFetching } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n\n  const observerCallback = (visiblePosts) => {\n    const uploadedPosts = getMorePosts(postsList, visiblePosts);\n    if (uploadedPosts) {\n      setVisiblePosts((visiblePosts) => [...visiblePosts, ...uploadedPosts]);\n    }\n  };\n\n  useEffect(() => {\n    setVisiblePosts((visiblePosts) => [\n      ...postsList.slice(0, visiblePosts.length),\n    ]);\n  }, [postsList]);\n\n  useObserver(\n    lastElement,\n    postsList.length !== visiblePosts,\n    isFetching,\n    observerCallback,\n    visiblePosts\n  );\n\n  useEffect(() => {\n    if (postsList.length !== 0) return;\n\n    const getPosts = async () => {\n      await dispatch(getAllPosts());\n    };\n\n    getPosts();\n  }, []);\n\n  return (\n    <>\n      <RandomNumber />\n      {isFetching ? (\n        <Preloader />\n      ) : (\n        <div>\n          <PostsFilter posts={visiblePosts} lastElement={lastElement} />\n        </div>\n      )}\n      <div\n        ref={lastElement}\n        style={{ height: \"10px\", backgroundColor: \"red\" }}\n      ></div>\n    </>\n  );\n};\n\nexport default PostsList;\n"]},"metadata":{},"sourceType":"module"}